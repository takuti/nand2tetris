// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
  field Array s;
  field int len, lenMax;

  /** constructs a new empty string with a maximum length of maxLength
   *  and initial length of 0. */
  constructor String new(int maxLength) {
    let s = Array.new(maxLength + 1);
    let len = 0;
    let lenMax = maxLength;
    return this;
  }

  /** Disposes this string. */
  method void dispose() {
    do s.dispose();
    return;
  }

  /** Returns the current length of this string. */
  method int length() {
    return len;
  }

  /** Returns the character at the j-th location of this string. */
  method char charAt(int j) {
    return s[j];
  }

  /** Sets the character at the j-th location of this string to c. */
  method void setCharAt(int j, char c) {
    let s[j] = c;
    return;
  }

  /** Appends c to this string's end and returns this string. */
  method String appendChar(char c) {
    let s[len] = c;
    let len = len + 1;
    return this;
  }

  /** Erases the last character from this string. */
  method void eraseLastChar() {
    let len = len - 1;
    return;
  }

  /** Returns the integer value of this string,
   *  until a non-digit character is detected. */
  method int intValue() {
    var int v, i, d;
    var boolean neg;
    let v = 0;
    let i = 0;
    let neg = false;
    if (s[0] = 45) {
      let i = 1;
      let neg = true;
    }
    while (i < len) {
      let d = s[i] - 48;
      let v = v * 10 + d;
      let i = i + 1;
    }
    if (neg) {
      let v = -1 * v;
    }
    return v;
  }

  /** Sets this string to hold a representation of the given value. */
  method void setInt(int val) {
    var int lastDigit, c, i, head;
    var boolean neg;
    let neg = false;
    if (val < 0) {
      let neg = true;
      let val = Math.abs(val);
    }

    let lastDigit = val - (val / 10 * 10); // val % 10
    let c = lastDigit + 48;
    let len = 0;
    while (~(val < 10)) {
      let s[lenMax - len] = c; // put chars from left to right
      let len = len + 1;

      let val = val / 10;
      let lastDigit = val - (val / 10 * 10);
      let c = lastDigit + 48;
    }
    let s[lenMax - len] = c;
    let len = len + 1;

    let i = 0;
    let head = 0;
    if (neg) {
      let s[0] = 45;
      let head = 1;
    }
    while (i < len) { // move chars to left
      let s[head + i] = s[lenMax - len + i + 1];
      let i = i + 1;
    }
    if (neg) {
      let len = len + 1;
    }

    return;
  }

  /** Returns the new line character. */
  function char newLine() {
    return 128;
  }

  /** Returns the backspace character. */
  function char backSpace() {
    return 129;
  }

  /** Returns the double quote (") character. */
  function char doubleQuote() {
    return 34;
  }
}
